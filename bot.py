# bot.py

import os
import logging
import threading
import time
import datetime
import json
from http.server import HTTPServer, BaseHTTPRequestHandler

import pytz
import requests
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackContext
from telegram.error import Conflict

# ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî
logging.basicConfig(
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‚Äî –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî
BOT_TOKEN  = os.environ['BOT_TOKEN']
PORT       = int(os.environ.get("PORT", "8000"))
BASE_URL   = os.environ.get("BASE_URL")          # –Ω–∞–ø—Ä–∏–º–µ—Ä https://telegram-reminder-bot-j9mc.onrender.com/
CHATS_FILE = 'chats.json'

# ‚Äî –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –∑–æ–Ω–∞ ‚Äî
MSK = pytz.timezone("Europe/Moscow")

# ‚Äî –í–∞—à–µ –±–æ–µ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî
SCHEDULE = [
    { "time": "20:50", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1095733793">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã API deposits</a>' },
    { "time": "20:50", "text": 'üì¢ <b>–ê–≤—Ç–æ –º–µ—Ç–æ–¥—ã:</b>\n–í—ã–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã BDT_rocket_gb –≤ –∞–¥–º–∏–Ω–∫–µ (–ª–∏–±–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–ª–µ–≥—É) –í—ã–∫–ª—é—á–∏–ª–∏ BDT_rocket_gb –Ω–∞ —Å–∞–π—Ç–µ\n@jurxis @nii_med @gnxt_monitoring @Lika_mbt @Vikgmbt' },
    { "time": "21:55", "text": '‚ùå <a href="https://mostbet2.com/admin/payout-route/list?filter%5BpayoutMethod%5D%5Bvalue%5D=khalti_birpay">–í—ã–∫–ª—é—á–∏—Ç—å –º–µ—Ç–æ–¥ –≤—ã–ø–ª–∞—Ç Khalti_birpay –≤ –∞–¥–º–∏–Ω–∫–µ</a>' },
    { "time": "22:20", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1393952854">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "02:45", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1393952854">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä—É—á–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "02:50", "text": '‚ö†Ô∏è <a href="https://docs.google.com/spreadsheets/d/1bmnhijfGGcA9Vp1Zkw07JoOFCE6IJk0U/edit?pli=1&gid=1749528799">–í—ã–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–ø–ª–∞—Ç—ã –∞–≥–µ–Ω—Ç–∞ Naji_MAD</a>' },
    { "time": "02:55", "text": '‚úÖ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1095733793">–í–∫–ª—é—á–∏—Ç—å API –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ BDT</a>' },
    { "time": "02:55", "text": 'üîÑ <a href="https://mostbet2.com/admin/app/paymentroute/list?filter%5BpaymentMethod%5D%5Bvalue%5D=rocket_gb">–í–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã BDT_rocket_gb –≤ –∞–¥–º–∏–Ω–∫–µ</a>\nüì¢ –ê–≤—Ç–æ –º–µ—Ç–æ–¥—ã: –í–∫–ª—é—á–∏–ª–∏ BDT_rocket_gb –Ω–∞ —Å–∞–π—Ç–µ\n@jurxis @nii_med @gnxt_monitoring @Lika_mbt @Vikgmbt' },
    { "time": "06:20", "text": 'üîí <a href="https://docs.google.com/spreadsheets/d/1J89GcldOX_xfqxNVhzhcjIGmuQ40Y01QsoMbJWDstCU/edit?pli=1&gid=2063840569">–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –≤—ã–ø–ª–∞—Ç—ã —à–∏—Ñ—Ç–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ò–Ω–¥–∏–∏</a>' },
    { "time": "11:20", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1393952854">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "18:20", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1393952854">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "10:00", "text": 'üìä <a href="https://new.admgrnb.com/greenback/payment-orders">–†–µ–≥—É–ª—è—Ä–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞! –î–æ 12:00 –ú–°–ö –≤—ã–≥—Ä—É–∑–∫–∞ –∞–ø–ø—Ä—É–≤–Ω—É—Ç—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ Greenback</a>' },
    { "time": "10:00", "text": 'üóìÔ∏è <b>–ü–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –¥–æ 12:00 –ú–°–ö:</b> –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –®–∞–º–∏–ª—é 3 –≤—ã–≥—Ä—É–∑–∫–∏\n<a href="https://confluence.dats.tech/pages/viewpage.action?pageId=760321781">–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</a>' },
]

# ‚Äî HTTP-healthcheck –¥–ª—è Render ‚Äî
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    HTTPServer(('0.0.0.0', PORT), HealthHandler).serve_forever()

# ‚Äî Keep-alive, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å–ø–∞–ª ‚Äî
def keep_alive():
    if not BASE_URL:
        logger.warning("BASE_URL –Ω–µ –∑–∞–¥–∞–Ω, keep-alive –æ—Ç–∫–ª—é—á—ë–Ω")
        return
    while True:
        try:
            requests.get(BASE_URL, timeout=5)
            logger.info("Keep-alive pinged %s", BASE_URL)
        except Exception as e:
            logger.warning("Keep-alive failed: %s", e)
        time.sleep(300)

# ‚Äî –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º —á–∞—Ç–æ–≤ ‚Äî
def load_chats():
    try:
        with open(CHATS_FILE, 'r') as f:
            return json.load(f)
    except Exception:
        return []

def save_chats(chats):
    with open(CHATS_FILE, 'w') as f:
        json.dump(chats, f)

# ‚Äî –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —á–∞—Ç—ã ‚Äî
def broadcast(text: str, context: CallbackContext):
    chats = load_chats()
    for chat_id in chats:
        try:
            context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ %s: %s", chat_id, e)

# ‚Äî –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Conflict ‚Äî
def error_handler(update: Update, context: CallbackContext):
    if isinstance(context.error, Conflict):
        return
    logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", exc_info=context.error)

# ‚Äî –ö–æ–º–∞–Ω–¥—ã ‚Äî
def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    chats = load_chats()
    if chat_id not in chats:
        chats.append(chat_id)
        save_chats(chats)
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç %s", chat_id)
    update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

def test(update: Update, context: CallbackContext):
    update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!")

def next_notification(update: Update, context: CallbackContext):
    now = datetime.datetime.now(MSK)
    best, best_delta = None, None
    for item in SCHEDULE:
        hh, mm = map(int, item["time"].split(":"))
        run_dt = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
        if run_dt < now:
            run_dt += datetime.timedelta(days=1)
        delta = run_dt - now
        if best_delta is None or delta < best_delta:
            best, best_delta = item, delta
    send_time = (now + best_delta).strftime("%Y-%m-%d %H:%M")
    update.message.reply_text(
        f"üìÖ –ë–ª–∏–∂–∞–π—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ {send_time}:\n{best['text']}",
        parse_mode=ParseMode.HTML
    )

def all_notifications(update: Update, context: CallbackContext):
    today_items = []
    for item in SCHEDULE:
        hh, mm = map(int, item["time"].split(":"))
        today_items.append((datetime.time(hh, mm), item["text"]))
    today_items.sort(key=lambda x: (x[0].hour, x[0].minute))
    lines = ["üìÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (MSK):</b>"]
    for t, txt in today_items:
        lines.append(f"{t.strftime('%H:%M')} ‚Äî {txt}")
    update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

# ‚Äî –ü–ª–∞–Ω–∏—Ä—É–µ–º ¬´–±–æ–µ–≤—ã–µ¬ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî
def schedule_notifications(job_queue):
    job_queue.scheduler.configure(timezone=MSK)
    for item in SCHEDULE:
        hh, mm = map(int, item["time"].split(":"))
        text = item["text"]
        if "–ü–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º" in text:
            job_queue.run_daily(
                callback=lambda ctx, m=text: broadcast(m, ctx),
                time=datetime.time(hour=hh, minute=mm),
                days=(0,),
            )
        else:
            job_queue.run_daily(
                callback=lambda ctx, m=text: broadcast(m, ctx),
                time=datetime.time(hour=hh, minute=mm),
            )
    logger.info("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ SCHEDULE")

# ‚Äî –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –∏ keep-alive
    threading.Thread(target=run_http_server, daemon=True).start()
    threading.Thread(target=keep_alive, daemon=True).start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    updater = Updater(token=BOT_TOKEN, use_context=True)
    updater.bot.delete_webhook()
    dp = updater.dispatcher
    dp.add_error_handler(error_handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("test", test))
    dp.add_handler(CommandHandler("next", next_notification))
    dp.add_handler(CommandHandler("all", all_notifications))

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    schedule_notifications(updater.job_queue)

    # (–£–¥–∞–ª–µ–Ω–æ: —Ç–µ—Å—Ç–æ–≤–æ–µ –µ–∂–µ—á–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ run_repeating)

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    updater.start_polling(drop_pending_updates=True)
    logger.info("Polling –Ω–∞—á–∞—Ç, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    updater.idle()

if __name__ == "__main__":
    main()
