# bot.py

import os
import logging
import threading
import time
import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler

import pytz
import requests
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackContext
from telegram.error import Conflict

# ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî
logging.basicConfig(
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‚Äî –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî
BOT_TOKEN = os.environ['BOT_TOKEN']
CHAT_ID   = os.environ['CHAT_ID']
PORT      = int(os.environ.get("PORT", "8000"))
BASE_URL  = os.environ.get("BASE_URL")  # –¥–ª—è keep-alive –ø–∏–Ω–≥–∞

# ‚Äî –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –∑–æ–Ω–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ‚Äî
MSK = pytz.timezone("Europe/Moscow")

# ‚Äî –í–∞—à–µ –±–æ–µ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (MSK) ‚Äî
SCHEDULE = [
    { "time": "20:50", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPw...">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã API deposits</a>' },
    { "time": "20:50", "text": 'üì¢ <b>–ê–≤—Ç–æ –º–µ—Ç–æ–¥—ã:</b>\n–í—ã–∫–ª—é—á–∏–ª–∏ BDT_rocket_gb –Ω–∞ —Å–∞–π—Ç–µ\n@jurxis @nii_med @gnxt_monitoring @Lika_mbt @Vikgmbt' },
    { "time": "21:55", "text": '‚ùå <a href="https://mostbet2.com/admin/...">–í—ã–∫–ª—é—á–∏—Ç—å –º–µ—Ç–æ–¥ –≤—ã–ø–ª–∞—Ç Khalti_birpay –≤ –∞–¥–º–∏–Ω–∫–µ</a>' },
    { "time": "22:20", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPw...">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "02:45", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPw...">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "03:00", "text": '‚ö†Ô∏è <a href="https://docs.google.com/spreadsheets/d/1bmnhijfGG...">–í—ã–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–ø–ª–∞—Ç—ã –∞–≥–µ–Ω—Ç–∞ Naji_MAD</a>' },
    { "time": "03:05", "text": '‚úÖ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPw...">–í–∫–ª—é—á–∏—Ç—å API –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ BDT</a>' },
    { "time": "02:50", "text": '‚è≤Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã BDT (–¥–æ 03:00 GMT+3)' },
    { "time": "03:10", "text": 'üîÑ <a href="https://mostbet2.com/admin/...">–í–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã BDT_rocket_gb –≤ –∞–¥–º–∏–Ω–∫–µ</a>\nüì¢ –ê–≤—Ç–æ –º–µ—Ç–æ–¥—ã: –í–∫–ª—é—á–∏–ª–∏ BDT_rocket_gb –Ω–∞ —Å–∞–π—Ç–µ\n@jurxis @nii_med @gnxt_monitoring @Lika_mbt @Vikgmbt' },
    { "time": "06:20", "text": 'üîí <a href="https://docs.google.com/spreadsheets/d/1J89GcldOX...">–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –≤—ã–ø–ª–∞—Ç—ã —à–∏—Ñ—Ç–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ò–Ω–¥–∏–∏</a>' },
    { "time": "11:20", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPw...">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "18:20", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPw...">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "10:00", "text": 'üìä <a href="https://new.admgrnb.com/greenback/payment-orders">–†–µ–≥—É–ª—è—Ä–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞! –î–æ 12:00 –ú–°–ö –≤—ã–≥—Ä—É–∑–∫–∞ –∞–ø–ø—Ä—É–≤–Ω—É—Ç—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ Greenback</a>' },
    { "time": "10:00", "text": 'üóìÔ∏è <b>–ü–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –¥–æ 12:00 –ú–°–ö:</b> –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –®–∞–º–∏–ª—é 3 –≤—ã–≥—Ä—É–∑–∫–∏\n<a href="https://confluence.dats.tech/pages/...">–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</a>' },
]

# ‚Äî HTTP-healthcheck –¥–ª—è Render ‚Äî
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    server = HTTPServer(('0.0.0.0', PORT), HealthHandler)
    logger.info(f"HTTP healthcheck listening on port {PORT}")
    server.serve_forever()

# ‚Äî Keep-alive: –ø–∏–Ω–≥—É–µ–º —Å–≤–æ–π BASE_URL —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç ‚Äî
def keep_alive():
    if not BASE_URL:
        logger.warning("BASE_URL not set, keep-alive thread disabled")
        return
    while True:
        try:
            requests.get(BASE_URL, timeout=5)
            logger.info("Keep-alive pinged %s", BASE_URL)
        except Exception as e:
            logger.warning("Keep-alive failed: %s", e)
        time.sleep(300)

# ‚Äî Error-handler: –∏–≥–Ω–æ—Ä–∏–º —Ç–æ–ª—å–∫–æ Conflict ‚Äî
def error_handler(update: Update, context: CallbackContext):
    if isinstance(context.error, Conflict):
        return
    logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", exc_info=context.error)

# ‚Äî –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ‚Äî
def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.")

def test(update: Update, context: CallbackContext):
    update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!")

def next_notification(update: Update, context: CallbackContext):
    now = datetime.datetime.now(MSK)
    best, best_delta = None, None
    for item in SCHEDULE:
        hh, mm = map(int, item["time"].split(":"))
        run_dt = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
        if run_dt < now:
            run_dt += datetime.timedelta(days=1)
        delta = run_dt - now
        if best_delta is None or delta < best_delta:
            best, best_delta = item, delta
    send_time = (now + best_delta).strftime("%Y-%m-%d %H:%M")
    update.message.reply_text(
        f"üìÖ –ë–ª–∏–∂–∞–π—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ {send_time}:\n{best['text']}",
        parse_mode=ParseMode.HTML
    )

def all_notifications(update: Update, context: CallbackContext):
    today = datetime.datetime.now(MSK).date()
    items = []
    for item in SCHEDULE:
        hh, mm = map(int, item["time"].split(":"))
        items.append((datetime.time(hh, mm), item["text"]))
    items.sort(key=lambda x: (x[0].hour, x[0].minute))
    lines = ["üìÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (MSK):</b>"]
    for t, txt in items:
        lines.append(f"{t.strftime('%H:%M')} ‚Äî {txt}")
    update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

# ‚Äî –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–µ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚Äî
def schedule_notifications(job_queue):
    job_queue.scheduler.configure(timezone=MSK)
    for item in SCHEDULE:
        hh, mm = map(int, item["time"].split(":"))
        text = item["text"]
        job_queue.run_daily(
            callback=lambda ctx, m=text: ctx.bot.send_message(
                chat_id=CHAT_ID, text=m, parse_mode=ParseMode.HTML
            ),
            time=datetime.time(hour=hh, minute=mm),
        )
    logger.info("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ SCHEDULE")

# ‚Äî –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî
def main():
    # 1) HTTP-healthcheck
    threading.Thread(target=run_http_server, daemon=True).start()
    # 2) Keep-alive –ø–∏–Ω–≥–∏
    threading.Thread(target=keep_alive, daemon=True).start()

    # 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    updater = Updater(token=BOT_TOKEN, use_context=True)
    updater.bot.delete_webhook()
    dp = updater.dispatcher
    dp.add_error_handler(error_handler)

    # 4) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("test", test))
    dp.add_handler(CommandHandler("next", next_notification))
    dp.add_handler(CommandHandler("all", all_notifications))

    # 5) –ü–ª–∞–Ω–∏—Ä—É–µ–º –±–æ–µ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    schedule_notifications(updater.job_queue)

    # 6) –ó–∞–ø—É—Å–∫ polling
    updater.start_polling(drop_pending_updates=True)
    logger.info("Polling –Ω–∞—á–∞—Ç, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    updater.idle()

if __name__ == "__main__":
    main()
