# bot.py

import os
import logging
import threading
import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from zoneinfo import ZoneInfo

from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackContext
from telegram.error import Conflict

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ==========
logging.basicConfig(
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ==========
BOT_TOKEN = os.environ['BOT_TOKEN']
CHAT_ID   = os.environ['CHAT_ID']
PORT      = int(os.environ.get("PORT", "8000"))

# ========== HTTP-healthcheck –¥–ª—è Render ==========
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_http_server():
    server = HTTPServer(('0.0.0.0', PORT), HealthHandler)
    logger.info(f"HTTP healthcheck listening on port {PORT}")
    server.serve_forever()

# ========== –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ==========
# –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM" –∏ HTML-—Ç–µ–∫—Å—Ç (—Å –≤—à–∏—Ç—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏)
SCHEDULE = [
    { "time": "20:50", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1095733793">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã API deposits</a>' },
    { "time": "20:50", "text": 'üì¢ <b>–ê–≤—Ç–æ –º–µ—Ç–æ–¥—ã:</b>\n–í—ã–∫–ª—é—á–∏–ª–∏ BDT_rocket_gb –Ω–∞ —Å–∞–π—Ç–µ\n@jurxis @nii_med @gnxt_monitoring @Lika_mbt @Vikgmbt' },
    { "time": "21:55", "text": '‚ùå <a href="https://mostbet2.com/admin/payout-route/list?filter%5BpayoutMethod%5D%5Bvalue%5D=khalti_birpay">–í—ã–∫–ª—é—á–∏—Ç—å –º–µ—Ç–æ–¥ –≤—ã–ø–ª–∞—Ç Khalti_birpay –≤ –∞–¥–º–∏–Ω–∫–µ</a>' },
    { "time": "22:20", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1393952854">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "02:45", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1393952854">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "03:00", "text": '‚ö†Ô∏è <a href="https://docs.google.com/spreadsheets/d/1bmnhijfGGcA9Vp1Zkw07JoOFCE6IJk0U/edit?pli=1&gid=1749528799">–í—ã–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–ø–ª–∞—Ç—ã –∞–≥–µ–Ω—Ç–∞ Naji_MAD</a>' },
    { "time": "03:05", "text": '‚úÖ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1095733793">–í–∫–ª—é—á–∏—Ç—å API –¥–µ–ø–æ–∑–∏—Ç—ã –ø–æ BDT</a>' },
    { "time": "02:50", "text": '‚è≤Ô∏è –í—ã–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã BDT (—Ç–∞–π–º—Å–ª–æ—Ç –¥–æ 3:00 GMT+3)' },
    { "time": "03:10", "text": 'üîÑ <a href="https://mostbet2.com/admin/app/paymentroute/list?filter%5BpaymentMethod%5D%5Bvalue%5D=rocket_gb">–í–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã BDT_rocket_gb –≤ –∞–¥–º–∏–Ω–∫–µ</a>\nüì¢ –ê–≤—Ç–æ –º–µ—Ç–æ–¥—ã: –í–∫–ª—é—á–∏–ª–∏ BDT_rocket_gb –Ω–∞ —Å–∞–π—Ç–µ @jurxis @nii_med @gnxt_monitoring @Lika_mbt @Vikgmbt' },
    { "time": "06:20", "text": 'üîí <a href="https://docs.google.com/spreadsheets/d/1J89GcldOX_xfqxNVhzhcjIGmuQ40Y01QsoMbJWDstCU/edit?pli=1&gid=2063840569">–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏ –≤—ã–ø–ª–∞—Ç—ã —à–∏—Ñ—Ç–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ò–Ω–¥–∏–∏</a>' },
    { "time": "11:20", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1393952854">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "18:20", "text": 'üîÑ <a href="https://docs.google.com/spreadsheets/d/1LggaqDZjPwGGj7Mqher4D6mHhgmhL1Ed/edit?pli=1&gid=1393952854">–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ BDT</a>' },
    { "time": "10:00", "text": 'üìä <a href="https://new.admgrnb.com/greenback/payment-orders">–†–µ–≥—É–ª—è—Ä–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞! –î–æ 12:00 –ú–°–ö –≤—ã–≥—Ä—É–∑–∫–∞ –∞–ø–ø—Ä—É–≤–Ω—É—Ç—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏–∑ Greenback</a>' },
    { "time": "10:00", "text": 'üóìÔ∏è <b>–ü–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –¥–æ 12:00 –ú–°–ö:</b> –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –®–∞–º–∏–ª—é 3 –≤—ã–≥—Ä—É–∑–∫–∏\n<a href="https://confluence.dats.tech/pages/viewpage.action?pageId=760321781">–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</a>' },
]

# ========== Error-handler ==========
def error_handler(update: Update, context: CallbackContext):
    err = context.error
    if isinstance(err, Conflict):
        return
    logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", exc_info=err)

# ========== –ö–æ–º–∞–Ω–¥—ã ==========
def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.")

def test(update: Update, context: CallbackContext):
    update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!")

def next_notification(update: Update, context: CallbackContext):
    msk = ZoneInfo("Europe/Moscow")
    now = datetime.datetime.now(msk)
    best_delta, best = None, None
    for item in SCHEDULE:
        hh, mm = map(int, item["time"].split(":"))
        run_dt = now.replace(hour=hh, minute=mm, second=0, microsecond=0)
        if run_dt < now:
            run_dt += datetime.timedelta(days=1)
        delta = run_dt - now
        if best is None or delta < best_delta:
            best_delta, best = delta, item
    send_time = (now + best_delta).strftime("%Y-%m-%d %H:%M")
    update.message.reply_text(
        f"üìÖ –ë–ª–∏–∂–∞–π—à–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ {send_time}:\n{best['text']}",
        parse_mode=ParseMode.HTML
    )

def all_notifications(update: Update, context: CallbackContext):
    msk = ZoneInfo("Europe/Moscow")
    now = datetime.datetime.now(msk)
    today = now.date()
    today_items = []
    for item in SCHEDULE:
        hh, mm = map(int, item["time"].split(":"))
        dt = datetime.datetime.combine(today, datetime.time(hh, mm), tzinfo=msk)
        today_items.append((dt.time(), item["text"]))
    today_items.sort(key=lambda x: (x[0].hour, x[0].minute))
    if not today_items:
        update.message.reply_text("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    lines = ["üìÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>"]
    for t, text in today_items:
        lines.append(f"{t.strftime('%H:%M')} ‚Äî {text}")
    update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

# ========== –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
def schedule_notifications(job_queue):
    msk = ZoneInfo("Europe/Moscow")
    for item in SCHEDULE:
        hh, mm = map(int, item["time"].split(":"))
        text = item["text"]
        job_queue.run_daily(
            callback=lambda ctx, m=text: ctx.bot.send_message(
                chat_id=CHAT_ID, text=m, parse_mode=ParseMode.HTML
            ),
            time=datetime.time(hour=hh, minute=mm, tzinfo=msk),
        )
    logger.info("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ SCHEDULE")

# ========== Main ==========
def main():
    # HTTP-healthcheck
    threading.Thread(target=run_http_server, daemon=True).start()

    updater = Updater(token=BOT_TOKEN, use_context=True)
    updater.bot.delete_webhook()
    dp = updater.dispatcher
    dp.add_error_handler(error_handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("test", test))
    dp.add_handler(CommandHandler("next", next_notification))
    dp.add_handler(CommandHandler("all", all_notifications))

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º
    schedule_notifications(updater.job_queue)

    # –ó–∞–ø—É—Å–∫ polling
    updater.start_polling(drop_pending_updates=True)
    logger.info("Polling –Ω–∞—á–∞—Ç, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    updater.idle()

if __name__ == "__main__":
    main()
